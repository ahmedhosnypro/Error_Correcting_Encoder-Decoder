type: edu
custom_name: stage5
files:
- name: src/correcter/Main.java
  visible: true
  text: |-
    package correcter;

    import java.util.Scanner;

    import static correcter.ErrorEmulator.createErrors;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println(createErrors(scanner.nextLine().trim()));
        }
    }
  learner_created: false
- name: src/correcter/ErrorEmulator.java
  visible: true
  text: |-
    package correcter;

    import java.util.Random;

    public class ErrorEmulator {
        static String createErrors(String input) {
            final String randomList = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            final int N = randomList.length();

            char[] chars = input.toCharArray();
            Random random = new Random();
            int l = chars.length;
            for (int i = 0; i < l - 2; i += 3) {
                int j = random.nextInt(2);

                while (true) {
                    char ch = randomList.charAt(random.nextInt(N));
                    if (chars[i + j] != ch) {
                        chars[i + j] = ch;
                        break;
                    }
                }
            }
            return new String(chars);
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived();
            searchEncoded();
            searchDecoded();

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived() {
            File file = new File("received.txt");
            if (file.exists()) {
                received = file;
            }
        }

        private static void searchEncoded() {
            File file = new File("encoded.txt");
            if (file.exists()) {
                encoded = file;
            }
        }

        private static void searchDecoded() {
            File file = new File("decoded.txt");
            if (file.exists()) {
                decoded = file;
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 4) {

                if (i + 4 > binaryString.length()) {
                    throw new RuntimeException("Can't decode binary data");
                }

                int startSubIndex = i;
                int stopSubIndex = i + 4;

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                int parityBit1 = 0;
                int parityBit2 = 0;
                int parityBit4 = 0;

                if (currSub.charAt(0) == '1') {
                    parityBit1++;
                    parityBit2++;
                }

                if (currSub.charAt(1) == '1') {
                    parityBit1++;
                    parityBit4++;
                }

                if (currSub.charAt(2) == '1') {
                    parityBit2++;
                    parityBit4++;
                }

                if (currSub.charAt(3) == '1') {
                    parityBit1++;
                    parityBit2++;
                    parityBit4++;
                }

                encodedPart =
                    (parityBit1 % 2 == 1? "1": "0") +
                        (parityBit2 % 2 == 1? "1": "0") +
                        currSub.charAt(0) +
                        (parityBit4 % 2 == 1? "1": "0") +
                        currSub.charAt(1) +
                        currSub.charAt(2) +
                        currSub.charAt(3) +
                        "0";

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
- name: src/correcter/Mode.java
  visible: true
  text: |-
    package correcter;

    public enum Mode {
        ENCODE,
        SEND,
        DECODE;
    }
  learner_created: true
- name: src/correcter/Encoder.java
  visible: true
  text: |-
    package correcter;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.util.ArrayList;

    import static correcter.Decoder.bitsToBytes;
    import static correcter.Decoder.bytesToString;

    public class Encoder {
        public static void encode() {
    //        File sendFile = new File("Error Correcting Encoder-Decoder/task/src/correcter/send.txt");
            File sendFile = new File("send.txt");
    //        File encodedFile = new File("Error Correcting Encoder-Decoder/task/src/correcter/encoded.txt");
            File encodedFile = new File("encoded.txt");
            try (FileInputStream sendFileInputStream = new FileInputStream(sendFile);
                 FileOutputStream encodedFileOutputStream = new FileOutputStream(encodedFile);) {

                //read send file
                byte[] bytes = sendFileInputStream.readAllBytes();
                ArrayList<String> hex = toHexArray(bytes);
                ArrayList<String> bin = toBitsArray(bytes);

    //            /*
                System.out.println(sendFile.getName() + ":");
                System.out.println("text view: " + bytesToString(bytes));
                System.out.print("hex view: ");
                hex.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.print("bin view: ");
                bin.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.println();
    //             */

                //encode send file
                ArrayList<String> encodedBin = encode(toBitsArray(bytes));
                ArrayList<String> encodedHex = toHexArray(bitsToBytes(encodedBin));

    //            /*
                System.out.println(encodedFile.getName() + ":");
                System.out.print("parity: ");
                encodedBin.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.print("hex view: ");
                encodedHex.forEach(s -> System.out.print(s + " "));
    //             */

                //**************************//
                encodedFileOutputStream.write(bitsToBytes(encodedBin));
                //**************************//
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public static ArrayList<String> encode(ArrayList<String> bits) {
            StringBuilder sb = new StringBuilder();
            ArrayList<String> output = new ArrayList<String>();
            for (String s : bits) {
                sb.append(s);
            }

            int length = sb.length();
            int bound = length % 3;

            for (int i = 0; i < sb.length() - bound; i += 3) {
                StringBuilder sb1 = new StringBuilder();

                char ch1 = sb.charAt(i);
                char ch2 = sb.charAt(i + 1);
                char ch3 = sb.charAt(i + 2);

                sb1.append(String.valueOf(ch1).repeat(2));
                sb1.append(String.valueOf(ch2).repeat(2));
                sb1.append(String.valueOf(ch3).repeat(2));


                int n1 = ch1 - 48;
                int n2 = ch2 - 48;
                int n3 = ch3 - 48;
                int n4 = n1 ^ n2 ^ n3;

                sb1.append(String.valueOf(n4).repeat(2));
                output.add(sb1.toString());
            }

            if (bound == 1) {
                StringBuilder sb1 = new StringBuilder();
                char ch = sb.charAt(sb.length() - bound);
                int n1 = ch - 48;
                int n2 = 0, n3 = 0;
                int m = n1 ^ n2 ^ n3;
                sb1.append(String.valueOf(ch).repeat(2));
                sb1.append(String.valueOf(0).repeat(4));
                sb1.append(String.valueOf(m).repeat(2));
                output.add(sb1.toString());
            } else if (bound == 2) {
                StringBuilder sb1 = new StringBuilder();
                char ch1 = sb.charAt(sb.length() - 2);
                char ch2 = sb.charAt(sb.length() - 1);
                int n1 = ch1 - 48;
                int n2 = ch2 - 48;
                int n3 = 0;
                int m = n1 ^ n2 ^ n3;
                sb1.append(String.valueOf(ch1).repeat(2));
                sb1.append(String.valueOf(ch2).repeat(2));
                sb1.append(String.valueOf(0).repeat(2));
                sb1.append(String.valueOf(m).repeat(2));

                output.add(sb1.toString());
            }

            return output;
        }

        public static ArrayList<String> toBitsArray(byte[] bytes) {
            ArrayList<String> list = new ArrayList<String>();
            for (byte b : bytes) {
                list.add(String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0'));
            }
            return list;
        }

        public static ArrayList<String> toHexArray(byte[] bytes) {
            ArrayList<String> list = new ArrayList<String>();
            for (byte b : bytes) {
                list.add(String.format("%02X", b));
            }

            return list;
        }

        static String triple(String input) {
            char[] chars = input.toCharArray();
            StringBuilder sb = new StringBuilder();
            for (char ch : chars) {
                for (int i = 0; i < 3; i++) {
                    sb.append(ch);
                }
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/correcter/Coder.java
  visible: true
  text: |-
    package correcter;

    import java.util.ArrayList;

    public class Coder {
        static String triple(String input) {
            char[] chars = input.toCharArray();
            StringBuilder sb = new StringBuilder();
            for (char ch : chars) {
                for (int i = 0; i < 3; i++) {
                    sb.append(ch);
                }
            }
            return sb.toString();
        }

        public static ArrayList<String> toBitsArray(byte[] bytes) {
            ArrayList<String> list = new ArrayList<String>();
            for (byte b : bytes) {
                list.add(String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0'));
            }
            return list;
        }

        public static ArrayList<String> toHexArray(byte[] bytes) {
            ArrayList<String> list = new ArrayList<String>();
            for (byte b : bytes) {
                list.add(String.format("%02X", b));
            }
            return list;
        }
    }
  learner_created: true
- name: src/correcter/Starter.java
  visible: true
  text: |-
    package correcter;

    import java.util.Scanner;

    import static correcter.Encoder.*;
    import static correcter.Decoder.*;
    import static correcter.Sender.send;

    public class Starter {
        public static void start() {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Write a mode: ");
            String input = scanner.nextLine().trim().toUpperCase();
            try {
                Mode mode = Mode.valueOf(input);
                System.out.println();
                switch (mode) {
                    case SEND:
                        send();
                        break;
                    case ENCODE:
                        encode();
                        break;
                    case DECODE:
                        decode();
                        break;
                    default:
                        break;
                }
            } catch (IllegalArgumentException e) {
                System.out.print("check your input");
            }
        }
    }
  learner_created: true
- name: src/correcter/Sender.java
  visible: true
  text: |-
    package correcter;

    import java.io.*;
    import java.util.ArrayList;

    import static correcter.Encoder.*;
    import static correcter.Decoder.*;
    import static correcter.ErrorEmulator.*;

    public class Sender {
        static void send() {
            File encodedFile = new File("encoded.txt");
    //        File encodedFile = new File("Error Correcting Encoder-Decoder/task/src/correcter/encoded.txt");
    //        File receivedFile = new File("Error Correcting Encoder-Decoder/task/src/correcter/received.txt");
            File receivedFile = new File("received.txt");
            try (FileInputStream encodedFileInputStream = new FileInputStream(encodedFile);
                 FileOutputStream receivedFileOutputStream = new FileOutputStream(receivedFile);) {

                //read encodedFile
                //**************************//
                byte[] encodedBytes = encodedFileInputStream.readAllBytes();
                //**************************//

                ArrayList<String> encodedHex = toHexArray(encodedBytes);
                ArrayList<String> encodedBits = toBitsArray(encodedBytes);

    //            /*
                System.out.println(encodedFile.getName() + ":");
                System.out.print("hex view: ");
                encodedHex.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.print("bin view: ");
                encodedBits.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.println();
    //             */

                //simulate error
                ArrayList<String> errorBits = createErrors(encodedBits);
                byte[] errorBytes = bitsToBytes(errorBits);
                ArrayList<String> errorHex = toHexArray(errorBytes);

    //            /*
                System.out.println(receivedFile.getName() + ":");
                System.out.print("bin view: ");
                errorBits.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.print("hex view: ");
                errorHex.forEach(s -> System.out.print(s + " "));
    //            */

                //send encoded file
                //**************************//
                receivedFileOutputStream.write(errorBytes);
                //*************************//
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/correcter/Decoder.java
  visible: true
  text: |-
    package correcter;

    import java.io.*;
    import java.util.ArrayList;

    import static correcter.Encoder.*;

    public class Decoder {
        public static void decode() {
    //        File receivedFile = new File("Error Correcting Encoder-Decoder/task/src/correcter/received.txt");
            File receivedFile = new File("received.txt");
    //        File decodedFile = new File("Error Correcting Encoder-Decoder/task/src/correcter/decoded.txt");
            File decodedFile = new File("decoded.txt");
            try (FileInputStream receivedFileInputStream = new FileInputStream(receivedFile);
                 FileOutputStream decodedFileOutputStream = new FileOutputStream(decodedFile);) {

                //read encodedFile
                //**************************//
                byte[] receivedBytes = receivedFileInputStream.readAllBytes();
                //**************************//

                ArrayList<String> receivedHex = toHexArray(receivedBytes);
                ArrayList<String> receivedBits = toBitsArray(receivedBytes);

                ///*
                System.out.println(receivedFile.getName() + ":");
                System.out.print("hex view: ");
                receivedHex.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.print("bin view: ");
                receivedBits.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.println();
                //*/

                //decode received file
                ArrayList<String> decodedBits = decode(receivedBits);
                ArrayList<String> decodedHex = toHexArray(receivedBytes);
                byte[] decodedBytes = bitsToBytes(decodedBits);

                ///*
                System.out.println(decodedFile.getName() + ":");
                System.out.print("correct: ");
                decodedBits.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.print("hex view: ");
                decodedHex.forEach(s -> System.out.print(s + " "));
                System.out.println();
                System.out.println("text view: " + bytesToString(decodedBytes));
                //*/

                //**************************//
                decodedFileOutputStream.write(bitsToBytes(decodedBits));
                //**************************//
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public static ArrayList<String> decode(ArrayList<String> bits) {
            ArrayList<String> output = new ArrayList<String>();

            int S = bits.size();
            int remainder = -1;
            if (S % 8 == 0)
                remainder = 0;
            else if (S % 2 == 0)
                remainder = 1;
            else
                remainder = 2;

            int bound = 0;
            if (remainder > 0)
                bound = 1;

            StringBuilder out = new StringBuilder();

            for (int s = 0; s < bits.size()/*-bound*/; s++) {
                String B = bits.get(s);
                for (int i = 0; i < B.length() - 2; i += 2) {
                    if (B.charAt(i) != B.charAt(i + 1)) {
                        int n1 = B.charAt(0) - 48;
                        int n2 = B.charAt(2) - 48;
                        int n3 = B.charAt(4) - 48;
                        int n4 = B.charAt(6) - 48;
                        int m = 0;
                        switch (i) {
                            case 0:
                                m = n2 ^ n3 ^ n4;
                                break;
                            case 2:
                                m = n1 ^ n3 ^ n4;
                                break;
                            case 4:
                                m = n1 ^ n2 ^ n4;
                                break;
                            default:
                                break;
                        }
                        if (out.length() == 8) {
                            output.add(out.toString());
                            out = new StringBuilder();
                        }
                        out.append(m);
                    } else {
                        if (out.length() == 8) {
                            output.add(out.toString());
                            out = new StringBuilder();
                        }
                        out.append(B.charAt(i));
                    }
                }
            }

            if (out.length() == 8) {
                output.add(out.toString());
            }
            return output;
        }

        static byte[] bitsToBytes(ArrayList<String> input) {

            byte[] bytes = new byte[input.size()];
            for (int i = 0; i < input.size(); i++) {
                String string = input.get(i);
                int n = 0;
                for (int j = 7; j >= 0; j--) {
                    n += (int) ((string.charAt(Math.abs(7 - j)) - 48) * Math.pow(2, j));
                }
                if (n > 127)
                    n -= 256;
                bytes[i] = (byte) n;
            }

            return bytes;
        }

        static String bytesToString(byte[] bytes) {
            StringBuilder sb = new StringBuilder();
            for (byte b : bytes) {
                char ch = (char) b;
                sb.append(ch);
            }

            return sb.toString().trim();
        }

        static String decode(String badString) {
            char[] chars = badString.toCharArray();
            StringBuilder sb = new StringBuilder();
            for (int i = 1; i < chars.length - 1; i += 3) {
                if (chars[i] == chars[i + 1]) {
                    sb.append(chars[i + 1]);
                } else if (chars[i] == chars[i - 1]) {
                    sb.append(chars[i - 1]);
                } else if (chars[i - 1] == chars[i + 1]) {
                    sb.append(chars[i - 1]);
                }

            }

            return sb.toString();
        }
    }
  learner_created: true
- name: decoded.txt
  visible: true
  learner_created: true
- name: encoded.txt
  visible: true
  learner_created: true
- name: received.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5458#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 04 Feb 2022 04:56:09 UTC
record: 5
